{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Community-Generated Lesson: Mapping Wildfire Burned Areas Using VIIRS/AVIRIS-3 Data (Python)\"\n",
        "author: \n",
        "  - \"David Fonseca\"\n",
        "format: \n",
        "    html\n",
        "bibliography: wildfires-references.bib\n",
        "---\n",
        "\n",
        "\n",
        "# Overview\n",
        "\n",
        "In this lesson, you will learn to access, preprocess, and analyze AVIRIS-3 data to map burned areas from the Palisades Fire in Los Angeles. Using satellite imagery obtained through the VIIRS tool, you will examine pre- and post-fire conditions, assess the fire’s impact on vegetation and infrastructure.\n",
        "\n",
        "## Learning Objectives\n",
        "\n",
        "By the end of this lesson, you should be able to:\n",
        "\n",
        "-   Access and download AVIRIS-3 and VIIRS Burn Area data for wildfire analysis.\n",
        "\n",
        "-   Preprocess and clean AVIRIS-3 spectral radiance data for visualization.\n",
        "\n",
        "-   Compare pre- and post-fire imagery to assess vegetation and burned area changes.\n",
        "\n",
        "Overlay VIIRS Burn Area data with AVIRIS-3 images using GIS tools to map burned areas.\n",
        "\n",
        "Evaluate wildfire impact by analyzing the overlap of burn data with infrastructure (e.g., buildings, population, critical infrastructure).\n",
        "\n",
        "Quantify damage and assess risk to urban zones and infrastructure.\n",
        "\n",
        "# Introduction\n",
        "\n",
        "Wildfires are one of the most devastating natural disasters, affecting ecosystems, wildlife, and human settlements. The Palisades Fire, which ignited on January 6, 2025, in the Los Angeles area, is a recent example of a wildfire that spread rapidly, impacting both natural environments and urban infrastructure. In this lesson, we will use AVIRIS-3 satellite imagery, accessed via the VIIRS tool, and VIIRS burn area data to analyze the fire’s effects.\n",
        "\n",
        "By comparing pre-fire and post-fire imagery, we will evaluate how vegetation changed and overlay this information with infrastructure data to assess the damage. This exercise will help you understand how remote sensing can support wildfire monitoring and risk analysis.\n",
        "\n",
        "## Palisades Fire Overview\n",
        "\n",
        "The Palisades Fire affected large parts of the Los Angeles region, particularly residential areas and natural vegetation. Satellite imagery from AVIRIS-3 and VIIRS provides us with valuable data to assess the extent of the fire's impact. By overlaying burn area data with infrastructure maps, we can determine how much of the urban and natural landscapes were affected. The data allows us to quantify the impact and identify areas at high risk.\n",
        "\n",
        "# Accessing Wildfire Data\n",
        "\n",
        "## Understanding AVIRIS-3 Data\n",
        "\n",
        "AVIRIS-3 provides high-resolution hyperspectral imagery across a wide range of wavelengths, allowing for detailed analysis of land surface properties.\n"
      ],
      "id": "fbccf7e8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import os\n",
        "import earthaccess\n",
        "import h5py\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import glob\n",
        "from scipy.interpolate import griddata\n",
        "\n",
        "from osgeo import gdal, osr\n"
      ],
      "id": "8e6c21e7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "A NASA Earthdata account is needed to download NASA Earthdata files."
      ],
      "id": "30a4d8f4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "\n",
        "\n",
        "# Authenticate with NASA Earthdata (you need an account)\n",
        "\n",
        "Auth = earthaccess.login()\n",
        "# Search for VIIRS Burned Area data\n",
        "viirs_data = earthaccess.search_data(\n",
        "    short_name=\"AV3_L1B_RDN_2356\", \n",
        "    temporal=('2025-01-16', '2025-01-16'),  # Palisades's wildfire (January 6 - January 17 2025)\n",
        "    bounding_box=(-118.8, 33.9, -118.46, 34.28)  # Bounding box for Palisades California\n",
        ")\n",
        "\n",
        "print(f\"Found {len(viirs_data)} files.\")"
      ],
      "id": "4eddab76",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Processing and Visualizing Satellite Images\n"
      ],
      "id": "6a3dfd9a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "\n",
        "\n",
        "# Extract RDN.nc file URLs from VIIRS data\n",
        "granule_urls = [\n",
        "    [file_url for file_url in file.data_links() if file_url.endswith('RDN.nc')]\n",
        "    for file in viirs_data[-6:]\n",
        "]\n",
        "\n",
        "for granule in granule_urls:\n",
        "    # Download files\n",
        "    earthaccess.download(granule, 'data/granule_files')\n",
        "            \n",
        "print(\"Processing complete for all granules.\")"
      ],
      "id": "70a50b00",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Plotting Data\n"
      ],
      "id": "a961eff8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plot first granule - Frist Flight\n",
        "\n",
        "file_path = \"data/granule_files/AV320250116t193840_005_L1B_RDN_3f4aef90_RDN.nc\"\n",
        "\n",
        "# Open the file and plot radiance with geolocation\n",
        "with h5py.File(file_path, 'r') as f:\n",
        "    radiance = f['radiance']['radiance']\n",
        "    lat = f['lat'][:]\n",
        "    lon = f['lon'][:]\n",
        "    \n",
        "    # Take a specific band (like band 25)\n",
        "    data = radiance[25, :, :]\n",
        "    \n",
        "    # Create cell edges\n",
        "    lon_edges = (lon[:-1, :-1] + lon[1:, 1:]) / 2\n",
        "    lat_edges = (lat[:-1, :-1] + lat[1:, 1:]) / 2\n",
        "    \n",
        "    # Sort to fix the monotonic issue\n",
        "    lon_edges = np.sort(lon_edges, axis=1)\n",
        "    lat_edges = np.sort(lat_edges, axis=0)\n",
        "\n",
        "    plt.figure(figsize=(12, 4))\n",
        "    plt.pcolormesh(lon_edges, lat_edges, data[:-1, :-1], shading='auto', cmap='viridis')\n",
        "    plt.colorbar(label='Radiance')\n",
        "    plt.title('Radiance (Band 25) with Geolocation')\n",
        "    plt.xlabel('Longitude')\n",
        "    plt.ylabel('Latitude')\n",
        "    plt.show()"
      ],
      "id": "45b23842",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plot first bacth of granules - First Flight\n",
        "granule_paths = glob.glob('data/*/*40_*RDN.nc')\n",
        "\n",
        "fig, axes = plt.subplots(1, 6, figsize=(16, 2))  # 1 row, 6 columns\n",
        "\n",
        "for i, path in enumerate(granule_paths):\n",
        "    with h5py.File(path, 'r') as f:\n",
        "        radiance = f['radiance']['radiance']\n",
        "        lat = f['lat'][:]\n",
        "        lon = f['lon'][:]\n",
        "        data = radiance[25, :, :]\n",
        "        lon_edges = (lon[:-1, :-1] + lon[1:, 1:]) / 2\n",
        "        lat_edges = (lat[:-1, :-1] + lat[1:, 1:]) / 2\n",
        "        lon_edges = np.sort(lon_edges, axis=1)\n",
        "        lat_edges = np.sort(lat_edges, axis=0)\n",
        "        pcm = axes[i].pcolormesh(lon_edges, lat_edges, data[:-1, :-1], shading='auto', cmap='viridis')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "121ebe40",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "flights = ['01', '03', '05']\n",
        "\n",
        "for flight in flights:\n",
        "    # List of file paths (ordered west to east)\n",
        "    file_paths = sorted(glob.glob(f'data/granule_files/*{flight}_*RDN.nc'))\n",
        "\n",
        "    # Band to extract\n",
        "    band = 25\n",
        "\n",
        "    # Define resolution for the common grid\n",
        "    num_points = 1000\n",
        "\n",
        "    # Initialize common grid bounds\n",
        "    lon_min, lon_max = float('inf'), float('-inf')\n",
        "    lat_min, lat_max = float('inf'), float('-inf')\n",
        "\n",
        "    # First loop to define grid bounds\n",
        "    for file_path in file_paths:\n",
        "        with h5py.File(file_path, 'r') as f:\n",
        "            lat = f['lat'][:]\n",
        "            lon = f['lon'][:]\n",
        "            lon_min = min(lon_min, lon.min())\n",
        "            lon_max = max(lon_max, lon.max())\n",
        "            lat_min = min(lat_min, lat.min())\n",
        "            lat_max = max(lat_max, lat.max())\n",
        "\n",
        "    # Create common grid\n",
        "    grid_lon = np.linspace(lon_min, lon_max, num_points)\n",
        "    grid_lat = np.linspace(lat_min, lat_max, num_points)\n",
        "    grid_lon, grid_lat = np.meshgrid(grid_lon, grid_lat)\n",
        "\n",
        "    # Initialize container for merged data\n",
        "    merged_radiance_list = []\n",
        "\n",
        "    file = 1\n",
        "    # Second loop to process each granule and interpolate to the grid\n",
        "    for file_path in file_paths:\n",
        "        print(f'--> Flight: {flight}, File {file} out of {len(file_paths)}')\n",
        "        with h5py.File(file_path, 'r') as f:\n",
        "            radiance = f['radiance']['radiance'][band, :, :]\n",
        "            lat = f['lat'][:]\n",
        "            lon = f['lon'][:]\n",
        "            \n",
        "            # Flatten arrays for interpolation\n",
        "            points = np.array([lon.flatten(), lat.flatten()]).T\n",
        "            radiance_flat = radiance.flatten()\n",
        "            \n",
        "            # Interpolate to common grid\n",
        "            interpolated_radiance = griddata(\n",
        "                points, radiance_flat, (grid_lon, grid_lat), method='linear'\n",
        "            )\n",
        "            \n",
        "            # Store result for averaging\n",
        "            merged_radiance_list.append(interpolated_radiance)\n",
        "\n",
        "    # Average the overlapping areas across all granules\n",
        "    merged_radiance = np.nanmean(merged_radiance_list, axis=0)\n",
        "\n",
        "    # Plot the merged result\n",
        "    plt.figure(figsize=(25, 3))\n",
        "    plt.pcolormesh(grid_lon, grid_lat, merged_radiance, shading='auto', cmap='viridis')\n",
        "    plt.colorbar(label='Radiance (uW nm-1 cm-2 sr-1)')\n",
        "    plt.title(f'Merged Radiance (Band {band}) with Geolocation - Fixed')\n",
        "    plt.xlabel('Longitude')\n",
        "    plt.ylabel('Latitude')\n",
        "    plt.show()\n"
      ],
      "id": "f76ed937",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "\n",
        "# Output file path\n",
        "    output_file = f'data/granule_files/merged_radiance_{flight}.tif'\n",
        "\n",
        "    # Create a new GeoTIFF file\n",
        "    driver = gdal.GetDriverByName('GTiff')\n",
        "    rows, cols = merged_radiance.shape\n",
        "    dataset = driver.Create(output_file, cols, rows, 1, gdal.GDT_Float32)\n",
        "\n",
        "    # Set geotransform and projection\n",
        "    xmin, xmax = grid_lon.min(), grid_lon.max()\n",
        "    ymin, ymax = grid_lat.min(), grid_lat.max()\n",
        "    xres = (xmax - xmin) / cols\n",
        "    yres = (ymax - ymin) / rows\n",
        "\n",
        "    geotransform = (xmin, xres, 0, ymax, 0, -yres)\n",
        "    dataset.SetGeoTransform(geotransform)\n",
        "\n",
        "    # Set projection to WGS84\n",
        "    srs = osr.SpatialReference()\n",
        "    srs.ImportFromEPSG(4326)  # WGS84\n",
        "    dataset.SetProjection(srs.ExportToWkt())\n",
        "\n",
        "    # Write data to the file\n",
        "    dataset.GetRasterBand(1).WriteArray(merged_radiance)\n",
        "    dataset.GetRasterBand(1).SetNoDataValue(np.nan)\n",
        "\n",
        "    # Close the dataset\n",
        "    dataset = None\n",
        "\n",
        "    print(f\"✅ GeoTIFF saved to: {output_file}\")"
      ],
      "id": "e4b5343c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Assessing Impcact\n"
      ],
      "id": "a5902e54"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# ✅ Path to single granule file\n",
        "file_path = 'data/granule_files/AV320250116t193840_003_L1B_RDN_3f4aef90_RDN.nc'\n",
        "\n",
        "print(f\"🚀 Processing file: {file_path}\")\n",
        "\n",
        "# ✅ Open the file and read data\n",
        "with h5py.File(file_path, 'r') as f:\n",
        "    # ✅ Radiance data\n",
        "    radiance = f['radiance']['radiance']\n",
        "    lat = f['lat'][:]\n",
        "    lon = f['lon'][:]\n",
        "\n",
        "    # ✅ Take a specific band (like band 25)\n",
        "    data = radiance[25, :, :]\n",
        "    \n",
        "    # ✅ Create cell edges for proper alignment\n",
        "    lon_edges = (lon[:-1, :-1] + lon[1:, 1:]) / 2\n",
        "    lat_edges = (lat[:-1, :-1] + lat[1:, 1:]) / 2\n",
        "\n",
        "    # ✅ Sort to fix the monotonic issue\n",
        "    lon_edges = np.sort(lon_edges, axis=1)\n",
        "    lat_edges = np.sort(lat_edges, axis=0)\n",
        "\n",
        "    # ✅ Plot radiance\n",
        "    fig, axes = plt.subplots(1, 2, figsize=(16, 6))\n",
        "\n",
        "    pcm = axes[0].pcolormesh(lon_edges, lat_edges, data[:-1, :-1], shading='auto', cmap='viridis')\n",
        "    fig.colorbar(pcm, ax=axes[0], label='Radiance (uW nm-1 cm-2 sr-1)')\n",
        "    axes[0].set_title('Radiance (Band 25)')\n",
        "    axes[0].set_xlabel('Longitude')\n",
        "    axes[0].set_ylabel('Latitude')\n",
        "\n",
        "    # ✅ Choose NIR and SWIR bands\n",
        "    # NIR ≈ 858.6 nm → Band 63  \n",
        "    # SWIR ≈ 2205.2 nm → Band 181  \n",
        "    nir_band = radiance[63, :, :]\n",
        "    swir_band = radiance[181, :, :]\n",
        "\n",
        "    # ✅ Compute NBR\n",
        "    nbr = (nir_band - swir_band) / (nir_band + swir_band)\n",
        "\n",
        "    # ✅ Mask out invalid values\n",
        "    nbr = np.ma.masked_invalid(nbr)\n",
        "\n",
        "    # ✅ Clip NBR values to between -1 and 1\n",
        "    nbr = np.clip(nbr, -1, 1)\n",
        "\n",
        "    # ✅ Plot NBR\n",
        "    pcm = axes[1].pcolormesh(lon_edges, lat_edges, nbr[:-1, :-1], shading='auto', cmap='RdYlBu_r', vmin=-1, vmax=1)\n",
        "    fig.colorbar(pcm, ax=axes[1], label='NBR')\n",
        "    axes[1].set_title('Normalized Burn Ratio (NBR)')\n",
        "    axes[1].set_xlabel('Longitude')\n",
        "    axes[1].set_ylabel('Latitude')\n",
        "\n",
        "# ✅ Show all plots\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "871e9437",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Radiance (Band 25) Interpretation\n",
        "\n",
        "-   The left image shows the radiance in the near-infrared (NIR) spectrum, which highlights vegetation and surface reflectance.\n",
        "\n",
        "-   In healthy, undisturbed vegetation, NIR reflectance tends to be higher because of the internal leaf structure.\n",
        "\n",
        "-   Burned or damaged areas typically show reduced NIR reflectance since the leaf structure is destroyed or altered.\n",
        "\n",
        "## Normalized Burn Ratio (NBR) Interpretation\n",
        "\n",
        "-   The NBR image (right) measures fire severity by comparing the difference between NIR (healthy vegetation) and SWIR (sensitive to moisture loss and charring).\n",
        "\n",
        "    -   High NBR values (close to +1, shown in red) indicate healthy vegetation.\n",
        "\n",
        "    -   Low NBR values (close to -1, shown in blue) indicate burned or damaged areas.\n",
        "\n",
        "\n",
        "Evidence of Fire Impact in NBR:\n",
        "\n",
        "-   Large patches of light red/orange color over the coastal and mountainous areas indicate healthy vegetation.\n",
        "\n",
        "-   However, the areas closer to the coastline and lowlands show lower NBR values (closer to 0 or negative), suggesting:\n",
        "\n",
        "    -   Loss of vegetation\n",
        "\n",
        "    -   Scorched or charred areas\n",
        "\n",
        "    -   Fire impact on the ground cover and tree canopy\n",
        "\n",
        "-   The smooth red area along the coast suggests widespread burn scars or barren ground post-fire.\n",
        "\n",
        "\n",
        "# Key Findings:\n",
        "\n",
        "-   The fire's most severe damage seems to be concentrated along the lower coastal and urban-adjacent regions, where NBR values are lowest.\n",
        "\n",
        "-   The higher, more rugged inland terrain shows less fire damage, consistent with the tendency of fires to spread more rapidly in low-lying dry areas.\n",
        "-   The radiance data confirms a reduction in NIR reflectance in the areas showing low NBR, consistent with fire-induced vegetation loss.\n",
        "-   The transition from low (red) to high (yellow) NBR values inland suggests a patchy burn pattern, where some areas were spared due to moisture or natural firebreaks.\n",
        "\n",
        "# Conclusion\n",
        "\n",
        "The analysis of radiance and NBR data from the Palisades fire area indicates significant burn damage in the central and northern regions. The low NBR values in these areas confirm the presence of scorched and barren land, consistent with post-fire effects. The southern and coastal regions show higher NBR values, suggesting healthy vegetation and lower fire impact. This analysis demonstrates the effectiveness of hyperspectral remote sensing in identifying and quantifying fire damage. Further analysis could improve understanding of vegetation recovery and long-term environmental impact.\n",
        "\n",
        "-   The Palisades Fire caused moderate to severe vegetation loss along the coastal and urban-facing regions.\n",
        "-   Higher elevations and mountainous terrain were less affected.\n",
        "-   The fire left behind a visible burn scar, with lower vegetation recovery in the most intensely burned areas."
      ],
      "id": "8600a85a"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\jmartine\\.conda\\envs\\geo\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}